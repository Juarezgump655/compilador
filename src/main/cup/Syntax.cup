package mi.primer.scanner;

import java_cup.runtime.*;
import java.util.ArrayList;
import util.*;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;


parser code {:
    public ArrayList<Object> resultados = new ArrayList<>();
    public ArrayList<String> consola = new ArrayList<>();
    public ArrayList<Variables> variables = new ArrayList<>();
    public String error = "";
    public Condicion condicion = new Condicion();

    public void syntax_error(Symbol s){
            error = "Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+".";
            System.err.println(error);
            consola.add(error);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.");
    }

:};

action code {:


:}



terminal Integer NUM;
terminal String ID, TIPO , TEXTO;
terminal Float FLOTANTE;
terminal MULTI, SUMA, RESTA, DIVIDIR, ASIGNAR;
terminal MAYOR,MENOR, IGUAL, DIFERENTE, MAYOR_IGUAL, MENOR_IGUAL;
terminal FLOT, ENT, CADENA;
terminal PUNTO_COMA, COMA;
terminal PARENTESIS_IZQ, PARENTESIS_DER;
terminal IMPRMIR;
terminal FUNCTION, SI, ENTONCES, FIN_SI, SINO;
terminal RETURN, RETORNO, FIN_FUNCION;



non terminal inicio, procedimiento, si;
non terminal String valor;
non terminal String tipo;
non terminal Variables declaracion;
non terminal print, printP;
non terminal String operaciones, operador, comparar,  operacionesP ,condicionP ;
non terminal String parametros;
non terminal intrucciones;
non terminal String concatenar, concatenarp;
non terminal String declaracionP;
non terminal Metodos funcion;
non terminal if, ifP;
non terminal Boolean condicion;



start with inicio;



inicio ::= intrucciones;

intrucciones  ::= declaracion intrucciones
              | print intrucciones
              | if intrucciones
              | /* Vacío */;


print ::= IMPRMIR PARENTESIS_IZQ printP:p{:
    System.out.println(p.toString());
    consola.add(p.toString());
    :}
;

printP ::= TEXTO:texto PARENTESIS_DER PUNTO_COMA {:
                     texto = texto.substring(1, texto.length() - 1);
                        RESULT = texto;
                 :}
          | ID:v PARENTESIS_DER PUNTO_COMA {:
                for (Variables variable : variables) {
                    if (variable.getNombre().equals(v)) {
                    RESULT = variable.getValor();
                    }
                }
            :}
           | concatenar:c PARENTESIS_DER PUNTO_COMA {:
                RESULT = c;
            :};



funcion ::= FUNCTION ID PARENTESIS_IZQ parametros PARENTESIS_DER RETURN tipo  intrucciones RETORNO ID  FIN_FUNCION;



parametros ::= tipo ID
           | tipo ID COMA parametros
           | /* Vacío */;

declaracion ::= tipo:tipo ID:id PUNTO_COMA {: variables.add(new Variables (tipo, id)); :}
             | tipo:tipo ID:id ASIGNAR declaracionP:valor  {:
              System.out.println("Tipo: "+tipo+" ID: "+id+" Valor: "+valor);
              variables.add(new Variables(tipo, valor, id)); :};

declaracionP ::= valor:valor PUNTO_COMA{:RESULT = valor;:}
               | operaciones:operacion  PUNTO_COMA {:
                ScriptEngineManager manager = new ScriptEngineManager();
                       			ScriptEngine engine = manager.getEngineByName("js");
                       			Object resultado = engine.eval(operacion);
                       			System.out.println("Resultado: "+resultado);
                       			RESULT = resultado.toString();
               ;:}
               ;


if ::= SI PARENTESIS_IZQ condicion:condicion PARENTESIS_DER ENTONCES  intrucciones:ins ifP{:
            if (condicion) {
                System.out.println("Se cumple la condición");
                System.out.println(condicion.toString());
            } else {
                 System.out.println("No se cumple la condición");
                 System.out.println(condicion.toString());
            }
:};

ifP ::= FIN_SI PUNTO_COMA
       | SINO intrucciones FIN_SI PUNTO_COMA;


condicion ::= ID:id comparar:c condicionP:val
           {:
           String valor = "";
           for (Variables variable : variables) {
                     if (variable.getNombre().equals(id)) {
                         valor = variable.getValor();
                     }
           }
           Boolean resultado =  condicion.evaluar(c,valor, val);
           RESULT = resultado;
           :}
          | valor:v comparar:c condicionP:val{:
             Boolean resultado =  condicion.evaluar(c, v, val);
             RESULT = resultado;
          :};

condicionP ::= ID:id{:
           String  valor = "";
                 for (Variables variable : variables) {
                     if (variable.getNombre().equals(id)) {
                         valor = variable.getValor();
                     }
                 }
             RESULT = valor.toString();
            :}
           | valor:valor {:
            RESULT = valor.toString();
           :};

operaciones ::= valor:val operador:op operacionesP:p {:
              System.out.println("Valor: "+val+" Operador: "+op+" OperacionesP: "+p);
              String operacion = val+op+p;
              System.out.println("Operacion: "+operacion);
             			RESULT = operacion;
             :}
             | ID:id operador:op operacionesP:p{:
              String  valor = "";
                 for (Variables variable : variables) {
                     if (variable.getNombre().equals(id)) {
                         valor = variable.getValor();
                     }
                 }
             System.out.println("Valor: "+valor+" Operador: "+op+" OperacionesP: "+p);
                        String operacion = valor+op+p;
                        System.out.println("Operacion: "+operacion);
                       			RESULT = operacion;
                :}
                ;

operacionesP ::=  valor:val {:RESULT = val; :}
                  | ID:id {:
                  for (Variables variable : variables) {
                     if (variable.getNombre().equals(id)) {
                         RESULT = variable.getValor();
                     }
                     }
                  :}
                  | operaciones:c {:RESULT = c;:};


operador ::= MULTI {:RESULT = "*";:}
         | SUMA {:RESULT = "+";:}
         | RESTA {:RESULT = "-";:}
         | DIVIDIR{:RESULT = "/";:};

comparar ::= MAYOR {:RESULT = ">";:}
         | MENOR {:RESULT = "<";:}
         | IGUAL {:RESULT = "==";:}
         | DIFERENTE {:RESULT = "!=";:}
         | MAYOR_IGUAL {:RESULT = ">=";:}
         | MENOR_IGUAL {:RESULT = "<=";:};

tipo ::= FLOT :f {: RESULT = f.toString(); :}
         | ENT :e {: RESULT = e.toString(); :}
         | CADENA:t {: RESULT = t.toString(); :};

concatenar ::= TEXTO:t SUMA concatenarp:c {: RESULT = t.substring(1, t.length() - 1) + c; :}
             | ID:id SUMA concatenarp:c
             {:
              for (Variables variable : variables) {
                     if (variable.getNombre().equals(id)) {
                         RESULT = variable.getValor() + c;
                     }
                 }
             ;:};

concatenarp::= TEXTO:t {: RESULT = t.substring(1, t.length() - 1); :}
            | ID:id
            {:
             for (Variables variable : variables) {
                    if (variable.getNombre().equals(id)) {
                        RESULT = variable.getValor() ;
                    }
                }
            ;:}
            | concatenar:c {: RESULT = c; :};

valor ::= NUM:a {: RESULT = a.toString();:}
       | FLOTANTE:a {: RESULT = a.toString();:}
       | TEXTO:a {: RESULT =  a.substring(1, a.length() - 1);:};








