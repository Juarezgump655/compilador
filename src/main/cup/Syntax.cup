package mi.primer.scanner;

import java_cup.runtime.*;
import java.util.ArrayList;
import util.*;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import java.util.ArrayList;
import java.util.List;

parser code {:
    public ArrayList<Object> resultados = new ArrayList<>();

    public ArrayList<Variables> variables = new ArrayList<>();
    public String error = "";
    public Condicion condicion = new Condicion();
    public Variables variable = new Variables();
    public Ciclos ciclos = new Ciclos();
    public InstruccionesIf instruccionesIf = new InstruccionesIf();
    public Imprimir imprimir = new Imprimir();
    public ArrayList<String> consola = imprimir.getConsola();

     public void limpiarConsola(){
         imprimir.listaImpri.clear();
     }
    public void syntax_error(Symbol s){
            error = "Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+".";
            System.err.println(error);
            consola.add(error);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.");
    }

:};

action code {:


:}



terminal Integer NUM;
terminal String ID, TIPO , TEXTO;
terminal Float FLOTANTE;
terminal MULTI, SUMA, RESTA, DIVIDIR, ASIGNAR;
terminal MAYOR,MENOR, IGUAL, DIFERENTE, MAYOR_IGUAL, MENOR_IGUAL;
terminal FLOT, ENT, CADENA;
terminal PUNTO_COMA, COMA;
terminal PARENTESIS_IZQ, PARENTESIS_DER;
terminal IMPRMIR;
terminal FUNCTION, SI, ENTONCES, FIN_SI, SINO;
terminal RETURN, RETORNO, FIN_FUNCION, HACER, FINPROCEDIMIENTO, PROCEDIMIENTO, FINMIENTRAS, MIENTRAS;



non terminal inicio, procedimiento, si;
non terminal String valor;
non terminal String tipo;
non terminal Variables declaracion;
non terminal String printP, print;
non terminal String operaciones, operador, comparar,  operacionesP ,condicionP ;
non terminal String parametros;
non terminal intrucciones;
non terminal String concatenar, concatenarp;
non terminal String declaracionP;
non terminal Metodos funcion;
non terminal ifP, if, ciclo;
non terminal instruccionesif, instruccionesifElse, instrucciones;
non terminal Condicion condicion;

start with inicio;



inicio ::= intrucciones{:
    for(Variables v: variables){
        System.out.println(v);
    }
        imprimir.ejecutar();

        :};

intrucciones  ::= declaracion:p intrucciones {:
                // variables.add(p);
                :}
              | print:p intrucciones {:
                imprimir.listaImpri.add(p);
              :}
              | if intrucciones {:

              :}
              | ciclo intrucciones
              | /* Vacío */;


ciclo ::= MIENTRAS PARENTESIS_IZQ condicion:con PARENTESIS_DER HACER intrucciones:p FINMIENTRAS PUNTO_COMA{:

            //ciclos.agregarCondicion(con);
            Boolean c = condicion.evaluar(con);
            System.out.println("Condición: "+c);
           while(c){

                if(p instanceof Variables){
                Variables var = (Variables)p;

                } else if(p != null){
                    imprimir.listaImpri.add(p.toString());
                }

                if(!condicion.evaluar(con)){
                System.out.println("Se cumple la condición"+ con);
                break;
                }
                con.setValor1(variable.obtenerValorVaiable(con.getiDvariable1(), variables));
            }
         :};

declaracion ::= tipo:tipo ID:id PUNTO_COMA {:
                variables.add( new Variables(tipo, id));
             RESULT = new Variables(tipo, id);
            :}
             | tipo:tipo ID:id ASIGNAR declaracionP:valor  {:
              System.out.println("Tipo: "+tipo+" ID: "+id+" Valor: "+valor);
              variables.add( new Variables(tipo, valor, id));
              RESULT = new Variables(tipo, valor, id);
              :}
              | ID:ID ASIGNAR declaracionP:valor  {:
                variable.buscarYActualizarVariable(variables, ID, valor);
               :};

declaracionP ::= valor:valor PUNTO_COMA{:RESULT = valor;:}
               | operaciones:operacion  PUNTO_COMA {:
                ScriptEngineManager manager = new ScriptEngineManager();
                       			ScriptEngine engine = manager.getEngineByName("js");
                       			Object resultado = engine.eval(operacion);
                       			System.out.println("Resultado: "+resultado);
                       			RESULT = resultado.toString();
               ;:}
               ;

print ::= IMPRMIR PARENTESIS_IZQ printP:p{:
         RESULT = p;
    :}
;

printP ::= TEXTO:texto PARENTESIS_DER PUNTO_COMA {:
                     texto = texto.substring(1, texto.length() - 1);
                        RESULT = texto;
                 :}
          | ID:v PARENTESIS_DER PUNTO_COMA {:
                 RESULT = variable.obtenerValorVaiable(v, variables);
            :}
           | concatenar:c PARENTESIS_DER PUNTO_COMA {:
                RESULT = c;
            :};



funcion ::= FUNCTION ID PARENTESIS_IZQ parametros PARENTESIS_DER RETURN tipo  intrucciones RETORNO ID  FIN_FUNCION;



parametros ::= tipo ID
           | tipo ID COMA parametros
           | /* Vacío */;




condicion ::= ID:id comparar:c condicionP:val
            {:
           String valor = "";
           valor = variable.obtenerValorVaiable(id, variables);
           RESULT = new Condicion(c, valor, val, id);
           :}
          | valor:v comparar:c condicionP:val{:
             RESULT =  new Condicion(c, v, val);
          :};


condicionP ::= ID:id{:
           String  valor = "";
           valor = variable.obtenerValorVaiable(id, variables);
             RESULT = valor.toString();
            :}
           | valor:valor {:
            RESULT = valor.toString();
           :};

operaciones ::= valor:val operador:op operacionesP:p {:
              System.out.println("Valor: "+val+" Operador: "+op+" OperacionesP: "+p);
              String operacion = val+op+p;
              System.out.println("Operacion: "+operacion);
             			RESULT = operacion;
             :}
             | ID:id operador:op operacionesP:p{:
              String  valor = "";
              valor = variable.obtenerValorVaiable(id, variables);
             System.out.println("Valor: "+valor+" Operador: "+op+" OperacionesP: "+p);
                        String operacion = valor+op+p;
                        System.out.println("Operacion: "+operacion);
                       			RESULT = operacion;
                :}
                ;

operacionesP ::=  valor:val {:RESULT = val; :}
                  | ID:id {:
                  RESULT = variable.obtenerValorVaiable(id, variables);
                  :}
                  | operaciones:c {:RESULT = c;:};


operador ::= MULTI {:RESULT = "*";:}
         | SUMA {:RESULT = "+";:}
         | RESTA {:RESULT = "-";:}
         | DIVIDIR{:RESULT = "/";:};

comparar ::= MAYOR {:RESULT = ">";:}
         | MENOR {:RESULT = "<";:}
         | IGUAL {:RESULT = "==";:}
         | DIFERENTE {:RESULT = "!=";:}
         | MAYOR_IGUAL {:RESULT = ">=";:}
         | MENOR_IGUAL {:RESULT = "<=";:};

tipo ::= FLOT :f {: RESULT = f.toString(); :}
         | ENT :e {: RESULT = e.toString(); :}
         | CADENA:t {: RESULT = t.toString(); :};

concatenar ::= TEXTO:t SUMA concatenarp:c {: RESULT = t.substring(1, t.length() - 1) + c; :}
             | ID:id SUMA concatenarp:c
             {:
                RESULT =  variable.obtenerValorVaiable(id, variables) + c;


             ;:};

concatenarp::= TEXTO:t {: RESULT = t.substring(1, t.length() - 1); :}
            | ID:id
            {:
            RESULT =  variable.obtenerValorVaiable(id, variables);
            ;:}
            | concatenar:c {: RESULT = c; :};

valor ::= NUM:a {: RESULT = a.toString();:}
       | FLOTANTE:a {: RESULT = a.toString();:}
       | TEXTO:a {: RESULT =  a.substring(1, a.length() - 1);:};




if ::= SI PARENTESIS_IZQ condicion:c PARENTESIS_DER ENTONCES  instruccionesif:p ifP:ifp{:
            Boolean con = condicion.evaluar(c);
            System.out.println("Condición: "+con);
            if (con) {
                System.out.println("Se cumple la condición");
                if(instruccionesIf.getVariables().size() > 0){
                    for(Variables v: instruccionesIf.getVariables()){
                        variables.add(v);
                    }
                }
                if(instruccionesIf.getAgregarConsola().size() > 0){
                    for(String s: instruccionesIf.getAgregarConsola()){
                        imprimir.listaImpri.add(s);
                    }
                }
                 instruccionesIf.limpiarListaIf();
            } else {
            if(ifp != null ||  instruccionesIf.getVariablesElse().size() > 0 || instruccionesIf.getAgregarConsolaElse().size() > 0){
            instruccionesIf.limpiarListaIf();
              System.out.println("No se cumple la condición");
                if(instruccionesIf.getVariablesElse().size() > 0){
                    for(Variables v: instruccionesIf.getVariablesElse()){
                        variables.add(v);
                    }
                }
                if(instruccionesIf.getAgregarConsolaElse().size() > 0){
                    for(String s: instruccionesIf.getAgregarConsolaElse()){
                        imprimir.listaImpri.add(s);
                    }
                }
            }
             instruccionesIf.limpiarListaElse();
            }
:};

ifP ::= FIN_SI PUNTO_COMA
       | SINO instruccionesifElse:p FIN_SI PUNTO_COMA;


instruccionesif ::= declaracion:p instruccionesif:inst {:
                   instruccionesIf.agregarVariable(p);

                   if(instruccionesIf.esVariable(inst)){
                       Variables v = (Variables) p;
                       instruccionesIf.agregarVariable(v);
                   } else if(inst != null){
                       System.out.println("Es una instrucción");
                       instruccionesIf.agregarConsola(inst.toString());
                   }
                 :}
                | print:p instruccionesif:inst {:
                    instruccionesIf.agregarConsola(p.toString());
                  if(instruccionesIf.esVariable(inst)){
                       Variables v = (Variables) inst;
                       instruccionesIf.agregarVariable(v);
                   } else if(inst != null){
                       System.out.println("Es una instrucción");
                       instruccionesIf.agregarConsola(inst.toString());
                   }

                :}
                | /* Vacío */;

instruccionesifElse ::= declaracion:p instruccionesif:inst {:
                   instruccionesIf.agregarVariableElse(p);

                   if(instruccionesIf.esVariable(inst)){
                       Variables v = (Variables) p;
                       instruccionesIf.agregarVariableElse(v);
                   } else if(inst != null){
                       System.out.println("Es una instrucción else");
                       instruccionesIf.setAgregarConsolaElse(inst.toString());
                   }
                 :}
                | print:p instruccionesif:inst {:
                    instruccionesIf.setAgregarConsolaElse(p.toString());
                  if(instruccionesIf.esVariable(inst)){
                       Variables v = (Variables) inst;
                       instruccionesIf.agregarVariableElse(v);
                   } else if(inst != null){
                       System.out.println("Es una instrucción else");
                       instruccionesIf.setAgregarConsolaElse(inst.toString());
                   }

                :}
                | /* Vacío */;



